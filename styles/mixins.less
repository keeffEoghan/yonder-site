/**
 * Utilities.
 */

/**
 * A for-loop implementation - seems to work for number ranges but not lists.
 * WIP.
 *
 * @see https://github.com/seven-phases-max/less.curious/blob/master/src/for.less
 * @todo These don't seem to work in the Style Editor mode.
 */

.yr-for-(@i, @n) {
    .-each(@i);
}

.yr-for-(@n) when (isnumber(@n)) {
    .yr-for-(1, @n);
}

.yr-for-(@i, @n) when (@i < @n)  {
    .yr-for-((@i + (@n - @i) / abs(@n - @i)), @n);
}

/**
 * Simple pseudo-random.
 */

// Unbelievably, some LESS functions like `sin` and `mod` exist in the runtime Squarespace LESS,
// but not in the Style Editor version... so we need to use "safe" versions here.
.yr-mod(@a, @b) {
    @mod: @a - (@b * floor(@a / @b));
}

.yr-rand(@seed: 123456) {
    // `sin` not reliably supported by Squarespace LESS...
    // @r: sin(@seed) * 123456;
    // @rand: @r - floor(@r);

    // `((a * seed) + c) % m`
    // With `m = 2^32 = 4294967296`; `a = 1103515245`; `c = 12345`.
    // @see https://stackoverflow.com/questions/3062746/special-simple-random-number-generator
    .yr-mod((1103515245 * @seed) + 12345, 4294967296);
    @rand: @mod;
}


/**
 * A way to use the media query selectors.
 *
 * @example `.yr-m-(~'only screen and @{yr-mq-s-m}'); .-q() {...}`
 */

.yr-m-(@query) {
    @media @query {
        .-q();
    }
}


/**
 * Convenience for toggling a global or local flag.
 * Override controls whether we'll do the long expansion by default.
 *
 * This will enable the contents when `.flag` is present at or above the element scope:
 * `.yr-on-(~'.flag'); .-do() {...}`
 * Becomes `&.flag, .flag & {...}`, if `@override` is `true`.
 * Or simply `.flag & {...}`, if `@override` is `false`.
 * 
 * 
 * @note The scoping's a little funny here, to closure the mixin callback scope:
 *       `& { .yr-on-(...); .-do() {...}}` keeps `.-do` in a closure.
 *       `.yr-on-(...); .-do() {...}` leaves `.-do` out in local scope.
 */

@yr-on-override: false;

.yr-on-(@flag, @override: @yr-on-override) when (@override = true) {
    &@{flag},
    @{flag} & {
        .-do();
    }
}
.yr-on-(@flag, @override: @yr-on-override) when (@override = false) {
    @{flag} & {
        .-do();
    }
}


/**
 * Hide text (for text replacement, logos, a11y, etc).
 * Dimensions need to be set somehow for this to work.
 */
.yr-hide-text() {
    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden;
}

/**
 * Fancy link styling.
 */

.yr-a() {
    .tweak-yr-a-style-fancy & {
        position: relative;
        display: inline-block;
        border: 0 solid currentColor;
        text-decoration: none;
        z-index: 1;

        &[target="_blank"] {
            border-style: dashed;
        }

        &::before {
            content: '';
            position: absolute;
            display: block;
            border: inherit;
            z-index: -1;

            @x: -2px;
            left: @x;
            right: @x;
            bottom: 0;
            border-bottom-width: 1px;
            pointer-events: none;
            .transform-origin(bottom);
            will-change: transform, opacity, border-color;
            @transition: transform 500ms ease-out,
                opacity 500ms ease-out,
                border-color 500ms ease-out;
            .transition(@transition);
        }

        &:visited::before {
            opacity: 0.33;
        }

        &:hover,
        &:focus,
        &:active {
            &::before {
                @transition: transform 200ms ease-out,
                    opacity 300ms ease-out,
                    border-color 300ms ease-out;
                .transition(@transition);
            }
        }

        &:hover,
        &:focus {
            &::before {
                .transform(scaleY(@tweak-yr-a-style-fancy-scale));
                opacity: 0.25;
            }
        }

        &:active::before {
            .transform(scaleY(0));
        }

        &:empty::before {
            left: 0;
            right: 0;
        }
    }
}


/**
 * Loader animation styling.
 */

@yr-loader-fade-const: false;

/**
 * The base animation, for both `simple` and `fancy` loader animations.
 * @param {Boolean} @const Whether the animation rules should be scoped to only affect when
 *                        a load is happening; `true` if it can be applied all the time
 *                        (maybe smoother animation); `false` if it should be kept temporary
 *                        (less conflict with the element's normal state).
 */

.yr-loader-fade(@const: @yr-loader-fade-const) when (@const = false) {
    [data-yr-ajax-loading] & {
        .yr-loader-fade-base();
    }

    .yr-loader-fade-states();
}
.yr-loader-fade(@const: @yr-loader-fade-const) when (@const = true) {
    .yr-loader-fade-base();
    .yr-loader-fade-states();
}

.yr-loader-fade-base() {
    will-change: transform, opacity;
    @transition: transform @yr-fade-page-time @yr-ease-far-out,
        opacity @yr-fade-page-time @yr-ease-far-out;
    .transition(@transition);
}

.yr-loader-fade-states() {
    [data-yr-ajax-loading="navigate"] &,
    [data-yr-ajax-loading="unload"] & ,
    [data-yr-ajax-loading="swap"] & {
        // Hide.
        opacity: 0;
        .transform(translateY(@tweak-yr-fade-page-move)
            scale(@tweak-yr-fade-page-scale););
    }

    [data-yr-ajax-loading="navigate"] &,
    [data-yr-ajax-loading="unload"] & {
        @transition: transform @yr-fade-page-time @yr-ease-far-in,
            opacity @yr-fade-page-time @yr-ease-far-in;
        .transition(@transition);
    }

    [data-yr-ajax-loading="swap"] & {
        // Instant swap so we transition back in cleanly.
        .transition(none);
    }
}

/**
 * Random-ish timing offsets.
 */

.yr-loader-fade-stagger-inner(@n: 1, @seed: 123) when (@n > 1) {
    .yr-for-(@n); .-each(@i) {
        &:nth-child((~'@{n}n+@{i}')) {
            .yr-loader-fade-stagger-rand(@n + @i + @seed);
        }
    }
}
.yr-loader-fade-stagger-inner(@n: 1, @seed: 123) when (@n < 2) {
    .yr-loader-fade-stagger-rand(@n + @seed);
}

.yr-loader-fade-stagger-rand(@seed: 123) {
    // Returns `@rand`.
    .yr-rand(@seed);
    @stagger: @rand * @yr-fade-page-time;

    [data-yr-ajax-loading] & {
        // Fade out quickly.
        .transition-delay(@stagger);
    }

    [data-yr-ajax-loading="load"] & {
        // How long the parent has to do its animation in before the children do.
        .transition-delay(@yr-fade-page-time + @stagger);
    }
}

.yr-loader-fade-stagger-outer() {
    [data-yr-ajax-loading] & {
        // How long the children have to do their animations out before the parent does.
        .transition-delay(@yr-fade-page-time * 2);
    }

    [data-yr-ajax-loading="load"] & {
        // Fade in quickly.
        .transition-delay(0ms);
    }
}


/**
 * Aliases.
 */

.display(@display) when (@display = flex) {
    .flex-block();
}
.display(@display) when (@display = inline-flex) {
    .flex-inline();
}
.display(@display) when not (@display = flex) and not (@display = inline-flex) {
    display: @display;
}


/**
 * Global nav space.
 */

.yr-nav-fixed() {
    position: fixed;
    top: @tweak-yr-nav-button-offset;
}

.yr-nav-button() {
    min-width: @yr-size-hit-min;
    min-height: @yr-size-hit-min;
    background-position: center;
    color: @tweak-yr-color-light-1-tone-3;
    will-change: opacity, color;
    @transition: opacity 300ms @yr-ease-fade,
        color 300ms @yr-ease-fade;
    .transition(@transition);
}

/**
 * Switch which side of the view the nav is on.
 *
 * @param size {Length}
 */
.yr-align-nav-left(@size) {
    left: @size;

    .tweak-yr-nav-align-switch & {
        right: @size;
        left: auto;
    }
}
.yr-align-nav-right(@size) {
    right: @size;

    .tweak-yr-nav-align-switch & {
        left: @size;
        right: auto;
    }
}

/**
 * Same as `.align-view`, but for center-anchored elements.
 *
 * @param size {Length}
 */
.yr-align-nav-left-mid(@size) {
    .yr-align-nav-left(@size);
    .transform(translate(-50%, -50%));

    .tweak-yr-nav-align-switch & {
        .transform(translate(50%, -50%));
    }
}
.yr-align-nav-right-mid(@size) {
    .yr-align-nav-right(@size);
    .transform(translate(50%, -50%));

    .tweak-yr-nav-align-switch & {
        .transform(translate(-50%, -50%));
    }
}

.yr-size-nav(@size) {
    width: @size;
    height: @size;
    background-size: @size;

    .yr-inline-svg {
        width: @size;
        height: @size;
    }
}

.yr-nav-svg-shape() {
    fill: currentColor;
    @transition: color 300ms @yr-ease-fade;
    .transition(@transition);
}

/**
 * For replacing default icons with `block-field` contents.
 */

.yr-nav-button-icon() {
    .yr-nav-button-icon,
    .yr-nav-button-icon-block {
        width: 100%;
        height: 100%;
    }

    .display-yr-nav-button-icon() {
        .display(inline-flex);
    }

    .yr-nav-button-icon {
        .display-yr-nav-button-icon();
        .flex-flow(row nowrap);
        .justify-content(center);
        .align-items(center);
    }

    .yr-nav-button-icon-block {
        position: absolute;
        top: 0;
        left: 0;

        &@{yr-select-sqs-block-on} {
            & ~ .yr-nav-button-icon {
                display: none;
            }
        }

        &@{yr-select-sqs-block-empty} {
            & ~ .yr-nav-button-icon {
                .display-yr-nav-button-icon();
            }
        }
    }
}



/**
 * Block styles - base mixins.
 */

.style-block-dark() {
    background-color: @tweak-yr-color-dark-2-tone-2;

    .sqs-block-content,
    .yr-block-style-content {
        color: @tweak-yr-color-light-1-tone-2;
    }
}

.style-block-light() {
    background-color: @tweak-yr-color-light-1-tone-2;

    .sqs-block-content,
    .yr-block-style-content {
        color: @tweak-yr-color-dark-1-tone-2;
    }
}


/**
 * The stripes border style - typically to indicate content crossing between pages.
 * To change the border color, you can simply change `color` of the block.
 */
.style-block-stripes() {
    background-color: @tweak-yr-block-style-base-stripes-color-2;
    color: @tweak-yr-block-style-base-stripes-color-1;

    &::before,
    &::after {
        content: '';
        display: block;
        position: absolute;
    }

    .fill(@pad: 0) {
        top: @pad;
        right: @pad;
        left: @pad;
        bottom: @pad;
    }

    &::before {
        z-index: 0;
        .fill(0);

        background-image: repeating-linear-gradient(-45deg,
            transparent 0,
            transparent @tweak-yr-block-style-base-stripes-width,
            currentColor @tweak-yr-block-style-base-stripes-width,
            currentColor (@tweak-yr-block-style-base-stripes-width * 2));
    }

    &::after {
        z-index: 1;
        background-color: currentColor;
        .fill(@tweak-yr-block-style-base-stripes-space);
    }

    .sqs-block-content,
    .yr-block-style-content {
        color: @tweak-yr-color-dark-1-tone-2;
        padding: @tweak-yr-space-content;
    }
}

.style-block-stripes-sticky() {
    &::before {
        background-attachment: fixed;
    }
}


/**
 * Block styles - color mixins.
 */

.style-block-color-theme() {
    .sqs-block-content,
    .yr-block-style-content {
        color: @tweak-yr-color-dark-1-tone-2;
        // @todo Set this to be the _other_ page's theme color for content links?
        color: var(--tweak-yr-color-theme-on-tone-1);
    }
}
