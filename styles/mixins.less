/**
 * Utilities.
 */

/**
 * A for-loop implementation - seems to work for number ranges but not lists.
 * WIP.
 *
 * @see https://github.com/seven-phases-max/less.curious/blob/master/src/for.less
 */

.yr-for-(@i, @n) {
    .-each(@i);
}

.yr-for-(@n) when (isnumber(@n)) {
    .yr-for-(1, @n);
}

.yr-for-(@i, @n) when not (@i = @n)  {
    .yr-for-((@i + (@n - @i) / abs(@n - @i)), @n);
}

/**
 * Simple pseudo-random.
 */

.yr-rand(@seed: 123456) {
    @r: sin(@seed) * 123456;
    @rand: @r - floor(@r);
}


/**
 * A way to use the media query selectors.
 *
 * @example `.yr-m-(~'only screen and @{yr-mq-s-m}'); .-q() {...}`
 */

.yr-m-(@query) {
    @media @query {
        .-q();
    }
}


/**
 * Convenience for toggling a global or local flag.
 *
 * This will enable the contents when `.flag` is present at or above the element scope:
 * `.yr-on-(~'.flag'); .-do() {...}`
 * Becomes:
 * `&.flag, .flag & {...}`
 * 
 * @note The scoping's a little funny here, to closure the mixin callback scope:
 *       `& { .yr-on-(...); .-do() {...}}` keeps `.-do` in a closure.
 *       `.yr-on-(...); .-do() {...}` leaves `.-do` out in local scope.
 */

.yr-on-(@flag) {
    &@{flag},
    @{flag} & {
        .-do();
    }
}


/**
 * Fancy link styling.
 */

.yr-a() {
    .yr-on-(~'.tweak-yr-a-style-fancy'); .-do() {
        position: relative;
        display: inline-block;
        border: 0 solid currentColor;
        text-decoration: none;
        z-index: 1;

        &[target="_blank"] {
            border-style: dashed;
        }

        &::before {
            content: '';
            position: absolute;
            display: block;
            border: inherit;
            z-index: -1;

            @x: -2px;
            left: @x;
            right: @x;
            bottom: 0;
            border-bottom-width: 1px;
            pointer-events: none;
            .transform-origin(bottom);
            will-change: transform, opacity, border-color;
            .transition(transform 500ms ease-out,
                opacity 500ms ease-out,
                border-color 500ms ease-out;);
        }

        &:visited::before {
            opacity: 0.33;
        }

        &:hover,
        &:focus,
        &:active {
            &::before {
                .transition(transform 200ms ease-out,
                    opacity 300ms ease-out,
                    border-color 300ms ease-out;);
            }
        }

        &:hover,
        &:focus {
            &::before {
                .transform(scaleY(@tweak-yr-a-style-fancy-scale));
                opacity: 0.25;
            }
        }

        &:active::before {
            .transform(scaleY(0));
        }

        &:empty::before {
            left: 0;
            right: 0;
        }
    }
}


/**
 * Simple loading animation styling.
 */
/*
.yr-loader-fade-simple() {
    .yr-on-(~'.tweak-yr-loader-animate-content-simple'); .-do() {
        will-change: opacity;
        @transition: opacity @tweak-yr-loader-animate-content-time @yr-ease-far-out;
        .transition(@transition);

        [data-ajax-loading='start'] &,
        [data-ajax-loading='swap'] &,
        [data-ajax-loading='done'] & {
            opacity: 0;
            @transition: opacity @tweak-yr-loader-animate-content-time @yr-ease-far-in;
            .transition(@transition);
        }
    }
}*/


/**
 * Fancy loading animation styling.
 */
/*
.yr-loader-fade-fancy() {
    .yr-on-(~'.tweak-yr-loader-animate-content-fancy'); .-do() {
        will-change: transform, opacity;
        @transition: transform @tweak-yr-loader-animate-content-time @yr-ease-far-out,
            opacity @tweak-yr-loader-animate-content-time @yr-ease-far-out;
        .transition(@transition);

        [data-ajax-loading='start'] &,
        [data-ajax-loading='swap'] &,
        [data-ajax-loading='done'] & {
            opacity: 0;
            .transform(translateY(@tweak-yr-loader-animate-content-move)
                scale(@tweak-yr-loader-animate-content-scale););
            @transition: transform @tweak-yr-loader-animate-content-time @yr-ease-far-in,
                opacity @tweak-yr-loader-animate-content-time @yr-ease-far-in;
            .transition(@transition);
        }
    }
}*/

/**
 * Random-ish timing offsets.
 */
/*
.yr-loader-fade-fancy-stagger(@n: 5) {
    .yr-on-(~'.tweak-yr-loader-animate-content-fancy'); .-do() {
        &,
        [data-ajax-loading] & {
            .yr-for-(@n); .-each(@i) {
                .yr-rand(@n + @i);

                &:nth-child((~'@{n}n+@{i}')) {
                    .transition-delay(floor(@rand * @tweak-yr-loader-animate-content-time));
                }
            }
        }
    }
}

.yr-loader-fade-fancy-stagger-wrap() {
    .yr-on-(~'.tweak-yr-loader-animate-content-fancy'); .-do() {
        // This is how long the children have to do their animation before the parent does.
        [data-ajax-loading='start'] &,
        [data-ajax-loading='swap'] & {
            .transition-delay(@tweak-yr-loader-animate-content-time * 2);
        }

        // Make sure we fade in from a blank state.
        [data-ajax-loading='done'] & {
            .transition-duration(0ms);
            .transition-delay(0ms);
        }
    }
}*/


/**
 * Aliases.
 */

.display(@display) when (@display = flex) {
    .flex-block();
}
.display(@display) when (@display = inline-flex) {
    .flex-inline();
}
