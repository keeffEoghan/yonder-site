.yr-nav-holds {
    min-height: 100%;
    
    &,
    .yr-nav-holds-main {
        position: relative;
        .display(flex);
        .flex-flow(column nowrap);
        .justify-content(flex-start);
        .align-items(center);
    }

    .yr-nav-holds-main {
        .flex(1 1 auto);
        width: 100%;
    }

    @mq-ring-up: ~'only screen and @{yr-mq-hold-ring-up}';
    @holds-radius: 50vmin;
    @holds-radius-inner: @holds-radius * 0.6;

    #yr-nav-holds-mode,
    .yr-nav-holds-mode-hint {
        order: 1;
        z-index: @yr-z-nav-holds-mode;
    }

    .yr-nav-holds-mode-hint {
        display: none;
        position: relative;
        color: @tweak-yr-color-accent-1-tone-2;
        margin: @tweak-yr-space-pad;
        text-align: center;

        .tweak-yr-nav-holds-details-on & {
            display: block;
        }
    }

    .yr-nav-holds-mode-label {
        .yr-a();

        .yr-on-(~'.tweak-yr-a-style-fancy'); .-do() {
            border-color: @tweak-yr-color-accent-2-tone-1;
        }
    }

    .yr-nav-holds-mode-block {
        &@{yr-select-sqs-block-on} + .yr-nav-holds-mode-label {
            display: none;
        }

        &@{yr-select-sqs-block-empty} + .yr-nav-holds-mode-label {
            display: block;
        }
    }

    #yr-nav-holds-mode,
    .yr-nav-hold-info-toggle {
        display: none;
    }

    #yr-nav-holds-info-reset,
    .yr-nav-hold-info-toggle {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
        border: none;
        max-width: none;
        opacity: 0;
    }

    /**
     * Conveniences for toggling elements on mode.
     */

    @switch-time-on: 600ms;
    @switch-time-off: 300ms;

    .switcher() {
        will-change: opacity;
        .transition(opacity @switch-time-on ease-in);
    }
    .switcher-off() {
        opacity: 0;
        visibility: hidden;
        .transform(scale(0));
        @transition: opacity @switch-time-off ease-out,
            visibility 0ms linear @switch-time-off,
            transform 0ms linear @switch-time-off;
        .transition(@transition);
    }
    .switcher-off-flow() {
        position: absolute;
        top: 0;
        left: 0;
        .switcher-off();
    }


    /**
     * Mode related styles.
     */
    
    #yr-nav-holds-info-form {}

    #yr-nav-holds-info-reset {
        z-index: @yr-z-nav-holds-info-reset;
        font-size: 0;
        color: transparent;
        pointer-events: none;
        opacity: 0;
        background-color: @tweak-yr-color-base-tone-2;
        will-change: opacity;
        .transition(opacity 500ms ease-out);
    }

    .yr-nav-holds-info-hide {
        // Just used for the `reset` default value.
        display: none;
    }

    .yr-nav-hold-info-toggle {
        z-index: @yr-z-nav-holds-info-toggle;
    }

    .yr-nav-holds-info,
    .yr-nav-holds-info-hint-block,
    .yr-nav-holds-info-block,
    .yr-nav-holds-header {
        width: 100%;
        .switcher();
    }

    .yr-nav-holds-content {
        .flex(0 0 auto);
        position: relative;
        z-index: @yr-z-nav-holds-content;
        width: 100%;
        margin: @tweak-yr-space-pad;
        text-align: center;
        /* @todo Cascade fade `.yr-site-title, .yr-site-tagline, .yr-site-description, yr-nav-holds-titles-block` */

        @media @mq-ring-up {
            position: absolute;
            top: @holds-radius;
            left: 50%;
            .transform(translate(-50%, -50%));
            max-width: @holds-radius-inner;
            max-height: @holds-radius-inner;
            overflow: auto;
            padding: 0;
            margin: 0;
        }
    }


    /**
     * Detail toggles states.
     * The last unselected info-toggle radio-group is active.
     */

    .yr-nav-holds-info-hide {
        // If any are checked...
        &:checked {
            // Hide the info.
            ~ .yr-nav-holds-main {
                .yr-nav-holds-info-block {
                    .switcher-off-flow();
                }
            }
        }

        // If any aren't checked...
        &:not(:checked) {
            // Show the reset.
            ~ #yr-nav-holds-info-form #yr-nav-holds-info-reset {
                pointer-events: all;
                opacity: 0.5;
            }
        }

        // If all aren't checked...
        &:not(:checked) + .yr-nav-holds-info-hide:not(:checked) {
            // Hide the info hint.
            ~ .yr-nav-holds-main {
                .yr-nav-holds-info-hint-block {
                    .switcher-off-flow();
                }
            }
        }

        @details-groups: ~'yr-nav-holds-info-0-toggle',
            ~'yr-nav-holds-info-1-toggle';
        @details-length: length(@details-groups);

        .yr-for-(@details-length); .-each(@i) {
            @group: extract(@details-groups, @i - 1);
            @group-attr: ~'[name="@{group}"]';

            // If unselected, make the info-toggles of this group active.
            &@{group-attr}:checked {
                ~ .yr-nav-holds-main .yr-nav-hold-info-toggle@{group-attr} {
                    pointer-events: all;
                }
            }

            // If any preceding are unselected, make the info-toggles of this group inactive.
            &:checked ~ .yr-nav-holds-info-hide@{group-attr}:checked {
                ~ .yr-nav-holds-main .yr-nav-hold-info-toggle@{group-attr} {
                    pointer-events: none;
                }
            }

            // ~ .yr-nav-holds-main .yr-nav-holds-info-block {
                /* @todo Match inner blocks to menu items */
            // }
        }
    }


    /**
     * Toggle mode states.
     */

    #yr-nav-holds-mode {
        // `display: none` - depends on a label with `for="yr-nav-holds-mode"` to be toggled.

        &:checked {
            ~ .yr-nav-holds-mode-hint {
                .yr-nav-holds-mode-label {
                    .yr-on-(~'.tweak-yr-a-style-fancy'); .-do() {
                        border-style: dotted;
                    }
                }
            }

            ~ .yr-nav-holds-main {
                .yr-nav-hold-a {
                    pointer-events: none;
                }

                .yr-nav-hold-info-toggle {
                    display: block;
                }

                .yr-nav-holds-header {
                    .switcher-off-flow();
                }
            }
        }

        &:not(:checked) {
            ~ .yr-nav-holds-main {
                .yr-nav-holds-info {
                    .switcher-off-flow();
                }
            }
        }
    }

    .yr-nav-holds-menu {
        position: relative;
        .display(flex);
        .flex-flow(column nowrap);
        .flex(1 1 auto);
        width: 100%;
        max-width: 1300px;
        padding: 2em;
        margin: auto;

        .yr-on-(~'.tweak-yr-nav-holds-ring-show'); .-do() {
            @media @mq-ring-up {
                min-height: @holds-radius * 1.9;
            }
        }
    }

    .yr-site-title {
        display: none;

        .tweak-yr-nav-holds-site-title-show & {
            display: block;
        }
    }

    .yr-site-tagline {
        display: none;

        .tweak-yr-nav-holds-site-tagline-show & {
            display: block;
        }
    }

    .yr-site-description {
        display: none;
        font-size: 1em;

        .tweak-yr-nav-holds-site-description-show & {
            display: block;
        }
    }

    .yr-nav-hold {
        display: inline-block;
        position: relative;
        margin: 0 auto;
        z-index: @yr-z-nav-holds;

        @margin: 10%;

        &:nth-child(even) {
            margin: 0 @margin 0 auto;
        }

        &:nth-child(odd) {
            margin: 0 auto 0 @margin;
        }

        .yr-for-(@yr-color-themes-num); .-each(@i) {
            &:nth-child((~'@{yr-color-themes-num}n+@{i}')) .yr-use-hold-shape {
                color: extract(extract(@yr-color-themes, @i - 1), 1);
            }
        }

        .yr-on-(~'.tweak-yr-nav-holds-ring-show'); .-do() {
            @media @mq-ring-up {
                // Select the first `@tweak-yr-nav-holds-ring-num` of holds.
                &:nth-child((~'-n+@{tweak-yr-nav-holds-ring-num}')) {
                    position: absolute;
                    top: @holds-radius;
                    left: 50%;

                    &:nth-child(even),
                    &:nth-child(odd) {
                        margin: 0;
                    }
                }

                .yr-for-(@tweak-yr-nav-holds-ring-num); .-each(@i) {
                    &:nth-child(@i) {
                        @r: (@i - 1) * 360deg / @tweak-yr-nav-holds-ring-num;

                        @transform:
                            /* Center */
                            translate(-50%, -50%)
                            /* Angle in circle */
                            rotate(@r)
                            /* Move up onto circle circumference */
                            translateY(@holds-radius * -0.95)
                            /* Move back inside bounds of circle */
                            translateY(50%)
                            /* Move back a little margin */
                            translateY(2em)
                            /* Straighten */
                            rotate(-@r);

                        .transform(@transform);
                    }
                }

                // Move any of the rest down.

                @next: @tweak-yr-nav-holds-ring-num + 1;

                &:nth-child(@next) {
                    margin-top: @holds-radius * 2;
                }
            }
        }
    }

    .yr-nav-hold-a {
        position: relative;
        .display(flex);
        .flex-flow(row wrap);
        .justify-content(center);
        .align-items(center);
        min-width: @tweak-yr-nav-holds-size-min;
        min-height: @tweak-yr-nav-holds-size-min;
        max-width: @tweak-yr-nav-holds-size-max;
        max-height: @tweak-yr-nav-holds-size-max;
        padding: @tweak-yr-nav-holds-pad;
        text-decoration: none;
        color: @tweak-yr-color-light-1-tone-3;
        z-index: @yr-z-nav-holds-a;
        .tweak-yr-font-nav-holds;
    }

    .shape-hover() {
        ~ .yr-nav-holds-shape-block,
        ~ .yr-nav-hold-view {
            fill-opacity: 1;
            stroke-width: 10px;
        }
    }

    .shape-active() {
        ~ .yr-nav-holds-shape-block,
        ~ .yr-nav-hold-view {
            stroke-opacity: 0.08;
        }
    }

    .yr-nav-hold-info-toggle,
    .yr-nav-hold-a {
        &:hover,
        &:active {
            ~ .yr-nav-holds-shape-block,
            ~ .yr-nav-hold-view {
                @transition: fill-opacity 300ms ease-in-out,
                    stroke-opacity 500ms ease-out 100ms,
                    stroke-width 200ms ease-out;
                .transition(@transition);
            }
        }

        &:hover,
        &:focus {
            .shape-hover();
        }

        &:active {
            .shape-active();
        }
    }

    .yr-nav-hold-info-toggle:checked {
        .shape-hover();
        .shape-active();
    }

    #yr-nav-holds-info-form {
        &:active,
        &:hover {
            ~ .yr-nav-holds-main .yr-nav-hold-info-toggle:checked {
                ~ .yr-nav-holds-shape-block,
                ~ .yr-nav-hold-view {
                    fill-opacity: 0.8;
                    stroke-width: 8px;
                    stroke-opacity: 0.04;
                }
            }
        }
    }

    .yr-nav-holds-shape-block,
    .yr-nav-hold-view {
        position: absolute;
        pointer-events: none;
        top: -10%;
        right: -10%;
        bottom: -10%;
        left: -10%;
        width: 120%;
        height: 120%;
        fill: currentColor;
        stroke: currentColor;
        fill-opacity: 0;
        stroke-opacity: 0;
        stroke-width: 0;
        @transition: fill-opacity 600ms ease-in-out,
            stroke-opacity 800ms ease-out 100ms,
            stroke-width 400ms ease-out;
        .transition(@transition);
    }

    .yr-nav-holds-shape-block {
        &@{yr-select-sqs-block-on} + .yr-nav-hold-view {
            display: none;
        }

        &@{yr-select-sqs-block-empty} + .yr-nav-hold-view {
            display: block;
        }
    }

    .yr-nav-hold-view {
        z-index: @yr-z-nav-holds-view;
    }

    .yr-nav-holds-defs {
        display: none;

        path:nth-child(1) {
            fill-opacity: 1;
            stroke-opacity: 1;
        }

        path:nth-child(2) {
            fill: @tweak-yr-color-light-2-tone-2;
            opacity: 0.2;
            stroke-width: 0;
        }

        path:nth-child(3) {
            stroke: @tweak-yr-color-dark-1-tone-1;
            fill: none;
            stroke-width: 2px;
            stroke-miterlimit: 10px;
        }
    }
}
