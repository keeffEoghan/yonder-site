/**
 * Overrides for Squarespace layout contents.
 * Probably volatile, dependent on third party updates.
 */

.sqs-layout {
    overflow: hidden;
}

.yr-main .sqs-layout {
    @mq-collapse: ~'only screen and @{yr-mq-m-dn}';

    .sqs-block {
        position: relative;
        // For obeying float properly.
        overflow: hidden;
    }

    .sqs-block-content {
        position: relative;
        z-index: 2;
    }

    /**
     * Alternate grid system - kinda works...
     */
    & { .yr-on-(~'.tweak-yr-sqs-alt-grid'); .-do() {
        .sqs-row,
        .col,
        .sqs-block {
            .display(flex);

            @media @mq-collapse {
                display: block;
            }
        }

        .sqs-row {
            .flex-flow(row wrap);
            .justify-content(stretch);
            .align-items(stretch);
        }

        .col {
            .flex-flow(column nowrap);
            .justify-content(stretch);
            .align-items(stretch);
        }

        .sqs-block {
            .flex-flow(row wrap);
            .justify-content(stretch);
            .align-items(center);

            & { .yr-on-(~'.tweak-yr-sqs-block-align-up-high'); .-do() {
                .align-items(flex-start);
            }}

            & { .yr-on-(~'.tweak-yr-sqs-block-align-down-low'); .-do() {
                .align-items(flex-end);
            }}
        }

        .col,
        .sqs-block {
            flex: 1 0 auto;
        }

        .sqs-block-content {
            flex: 1 1 auto;
            max-width: 100%;
        }

        /**
         * @todo
         * Need to work around the default float-grid setup.
         * This doesn't work fully, as floats can't happen in a flex setup,
         * and can't switch flex direction (column -> row) in the same flex container.
         */
        .sqs-block[class*=float-right] {
            align-self: flex-end;
        }
    }}

    /**
     * Alternating cell colors - kinda works...
     */
    & { .yr-on-(~'.tweak-yr-sqs-alt-grid.tweak-yr-sqs-block-alt-show'); .-do() {
        .sqs-row:nth-child(even) > [class*="sqs-col"]:nth-child(odd) > .sqs-block:nth-child(odd),
        .sqs-row:nth-child(odd) > [class*="sqs-col"]:nth-child(even) > .sqs-block:nth-child(odd),
        .sqs-row:nth-child(odd) > [class*="sqs-col"]:nth-child(odd) > .sqs-block:nth-child(even) {
            &::before {
                content: '';
                display: block;
                position: absolute;
                top: 0;
                right: 0;
                left: 0;
                bottom: 0;
                background-color: @tweak-yr-sqs-block-alt-color;
                z-index: 0;
            }
        }
    }}

    @media @mq-collapse {
        [class*=sqs-col] {
            float: none;
            width: auto;
        }
    }

    & { .yr-on-(~'.tweak-yr-sqs-content-full-bleed'); .-do() {
        .sqs-block {
            padding: 0 !important;
            margin: 0 !important;
        }

        > .sqs-row {
            margin-left: auto;
            margin-right: auto;
        }
    }}

    .sqs-block-html,
    .sqs-block-markdown,
    .sqs-block-quote,
    .sqs-block-archive,
    .sqs-block-summary,
    [class*="sqs-block-summary"],
    .sqs-block-calendar,
    .sqs-block-tagcloud,
    .sqs-block-menu,
    .sqs-block-search,
    .sqs-block-form {
        .sqs-block-content {
            padding: @tweak-yr-sqs-content-space;
        }

        a:not([role="button"]) {
            .yr-a();
        }
    }

    .sqs-block-collectionlink {
        .sqs-block-content {
            padding: @tweak-yr-sqs-content-space;
        }

        .collectionlink-thumbnail {
            width: 100%;
        }

        a:not(.content-fill) {
            .yr-a();
        }
    }

    .sqs-block-newsletter {
        .yr-on-(~'.tweak-yr-sqs-block-newsletter-style-stripes'); .-do() {
            .sqs-block-content {
                padding: @tweak-yr-sqs-content-space;
            }
        }

        a:not([role="button"]) {
            .yr-a();
        }
    }


    /**
     * Block styles base mixins.
     */

    .style-block-dark() {
        background-color: @tweak-yr-color-dark-2-tone-2;

        .sqs-block-content {
            color: @tweak-yr-color-light-1-tone-2;
        }
    }

    .style-block-light() {
        background-color: @tweak-yr-color-light-1-tone-2;

        .sqs-block-content {
            color: @tweak-yr-color-dark-1-tone-2;
        }
    }


    /**
     * The stripes border style - typically to indicate content crossing between pages.
     * To change the border color, you can simply change `color` of the block.
     */
    .style-block-stripes() {
        background-color: @tweak-yr-sqs-block-style-stripes-color-2;
        color: @tweak-yr-sqs-block-style-stripes-color-1;

        &::before,
        &::after {
            content: '';
            display: block;
            position: absolute;
        }

        .fill(@pad: 0) {
            top: @pad;
            right: @pad;
            left: @pad;
            bottom: @pad;
        }

        &::before {
            z-index: 0;
            .fill(0);

            background-image: repeating-linear-gradient(-45deg,
                transparent 0,
                transparent @tweak-yr-sqs-block-style-stripes-width,
                currentColor @tweak-yr-sqs-block-style-stripes-width,
                currentColor (@tweak-yr-sqs-block-style-stripes-width * 2));
        }

        &::after {
            z-index: 1;
            background-color: currentColor;
            .fill(@tweak-yr-sqs-block-style-stripes-space);
        }

        .sqs-block-content {
            color: @tweak-yr-color-dark-1-tone-2;
        }
    }

    .style-block-stripes-sticky() {
        &::before {
            background-attachment: fixed;
        }
    }


    /**
     * Block styles color mixins.
     */

    .style-block-color-theme() {
        .sqs-block-content {
            color: @tweak-yr-color-dark-1-tone-2;
            // @todo Set this to be the _other_ page's theme color.
            color: var(--tweak-yr-color-theme-on-tone-2);
        }
    }


    /**
     * Apply block styles.
     */

    .style-block(@block) {
        // Base

        & { .yr-on-(~'.tweak-yr-@{block}-style-base-normal'); .-do() {}}

        & { .yr-on-(~'.tweak-yr-@{block}-style-base-dark'); .-do() {
            .style-block-dark();
        }}

        & { .yr-on-(~'.tweak-yr-@{block}-style-base-light'); .-do() {
            .style-block-light();
        }}

        & { .yr-on-(~'.tweak-yr-@{block}-style-base-stripes'); .-do() {
            .style-block-stripes();
        }}

        & { .yr-on-(~'.tweak-yr-@{block}-style-base-stripes.tweak-yr-sqs-block-style-stripes-sticky'); .-do() {
            .style-block-stripes-sticky();
        }}


        // Color

        & { .yr-on-(~'.tweak-yr-@{block}-style-color-normal'); .-do() {}}

        & { .yr-on-(~'.tweak-yr-@{block}-style-color-theme'); .-do() {
            .style-block-color-theme();
        }}
    }

    @blocks: ~'sqs-block',
        ~'sqs-block-html',
        ~'sqs-block-markdown',
        ~'sqs-block-quote',
        ~'sqs-block-newsletter',
        ~'sqs-block-archive',
        ~'sqs-block-summary',
        ~'sqs-block-calendar',
        ~'sqs-block-tagcloud',
        ~'sqs-block-menu',
        ~'sqs-block-search',
        ~'sqs-block-form',
        ~'sqs-block-collectionlink';

    .yr-for-(length(@blocks)); .-each(@i) {
        @block: extract(@blocks, @i);
        @select: ~'.@{block}';

        @{select} {
            .style-block(@block);
        }
    }

    // Special case, as it doesn't currently have a straightforward class name.
    [class*="sqs-block-summary"] {
        .style-block(~'sqs-block-summary');
    }

    .sqs-block-gallery .meta a:not([role="button"]) {
        .yr-a();
    }

    /**
     * Often used as a header banner.
     */
    .sqs-block-image {
        & { .yr-on-(~'.tweak-yr-sqs-image-block-use-site-fonts'); .-do() {
            .image-title p {
                .tweak-yr-font-h4 !important;
            }

            .image-subtitle p {
                .tweak-yr-font-p !important;
            }

            .image-caption p {
                .tweak-yr-font-p !important;
                margin: @tweak-yr-sqs-content-space @tweak-yr-pad-space;
            }
        }}

        & { .yr-on-(~'.tweak-yr-sqs-image-block-fixed-font-size'); .-do() {
            .sqs-dynamic-text,
            .image-title-wrapper,
            .image-subtitle-wrapper {
                font-size: 1em !important;
            }
        }}

        .design-layout-poster {
            .image-title,
            .image-subtitle {
                a {
                    .yr-a();

                    &:hover {
                        opacity: 1;
                    }
                }
            }

            .image-subtitle-wrapper {
                & { .yr-on-(~'.tweak-yr-sqs-image-block-poster-anchor-sub-up-high'); .-do() {
                    position: absolute;
                    width: inherit;
                    top: @tweak-yr-sqs-content-space;
                }}

                & { .yr-on-(~'.tweak-yr-sqs-image-block-poster-anchor-sub-down-low'); .-do() {
                    position: absolute;
                    width: inherit;
                    bottom: @tweak-yr-sqs-content-space;
                }}
            }
        }
    }

    .sqs-block-quote {
        blockquote {
            /**
             * Squarespace adds actual quote-mark elements...
             * We're already handling this with pseudo-elements, so get rid...
             */
            span {
                &:first-of-type,
                &:last-of-type {
                    display: none;
                }
            }
        }
    }

    .sqs-block-markdown,
    .sqs-block-horizontalrule {
        hr {
            width: auto;
            color: inherit;
            border-bottom: 1px solid currentColor;
            margin: @tweak-yr-p-space 0;
            background: transparent;
        }
    }

    .button-block {
        margin: @tweak-yr-p-space;
    }

    .sqs-gallery .meta {
        padding: 0 @tweak-yr-pad-space;
    }

    .sqs-gallery-block-grid img {
        max-width: none;
    }

    .sqs-gallery-design-strip-slide {
        opacity: 0.66;
        will-change: opacity;
        .transition(opacity 500ms ease-out);

        &:hover,
        &:focus,
        &.sqs-active-slide {
            opacity: 1;
            .transition(opacity 200ms ease-out);
        }
    }

    .newsletter-block .newsletter-form-field-element,
    .form-wrapper .field-list .field .field-element {
        border-color: @tweak-yr-color-light-2-tone-1;
        background-color: @tweak-yr-color-light-1-tone-3;
        color: @tweak-yr-color-dark-1-tone-1;
        .tweak-yr-font-input;

        &:focus {
            background-color: @tweak-yr-color-light-2-tone-2;
        }
    }

    .newsletter-block .submit-wrapper {
        .tweak-yr-font-button;
    }

    .sqs-block-search {
        border-color: @tweak-yr-color-light-2-tone-1;

        .color-dark .search-input {
            border-color: @tweak-yr-color-dark-2-tone-1;
        }
    }

    .form-wrapper .field-list .section.underline {
        border-color: @tweak-yr-color-light-2-tone-1;
    }

    .menu-block .menu-selector label {
        opacity: 0.66;
        will-change: opacity;
        .transition(opacity 500ms ease-out);

        &:hover,
        &:focus,
        &.menu-select-labels--active {
            text-decoration: none;
            opacity: 1;
            .transition(opacity 200ms ease-out);
        }
    }

    .sqs-block-archive .archive-block-wrapper {
        margin: auto;
    }

    .sqs-block-tagcloud .sqs-tagcloud {
        text-align: center;
    }
}

// This is placed at root level...
.sqs-search-preview-ui {
    color: @tweak-yr-color-dark-1-tone-2;
}
